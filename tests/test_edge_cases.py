import numpy as np
import eqtk


def test_trivial():
    N = np.array([[1]]).astype(float)
    K = np.array([0.5]).astype(float)
    A = np.array([[]]).reshape((0, 1)).astype(float)
    G = -np.log(K)
    x0 = np.array([0]).astype(float)
    res_NK = eqtk.solve(c0=x0, N=N, K=K)
    res_AG = eqtk.solve(c0=x0, A=A, G=G)
    assert np.allclose(res_NK, K)
    assert np.allclose(res_AG, K)


def test_large_diffs():
    # Test situations where free energy differences are very large
    A = np.array(
        [
            [1.0, 0.0, 0.0, 0.0, 0.0, 1.0],
            [0.0, 1.0, 0.0, 0.0, 1.0, 1.0],
            [0.0, 0.0, 1.0, 0.0, 1.0, 1.0],
            [0.0, 0.0, 0.0, 1.0, 1.0, 1.0],
        ]
    )
    G = np.array([0.0, 40, 40, 40, -2000, -2050])
    x0 = np.array([[1e-6, 1e-6, 1e-6, 1e-6, 0, 0]])
    logx = eqtk.solve(c0=x0, A=A, G=G, G_units=None, units=None, return_log=True)
    assert eqtk.eqcheck(logx, x0, A=A, G=G, c_as_log=True)

    A = np.array(
        [
            [1.0, 0.0, 0.0, 0.0, 0.0, 1.0],
            [0.0, 1.0, 0.0, 0.0, 1.0, 1.0],
            [0.0, 0.0, 1.0, 0.0, 1.0, 1.0],
            [0.0, 0.0, 0.0, 1.0, 1.0, 1.0],
        ]
    )
    G = np.array([0.0, 40, 40, 40, -2100, -2100])
    x0 = np.array([[1e-6, 1e-6, 1e-6, 1.0001e-6, 0, 0]])
    logx = eqtk.solve(c0=x0, A=A, G=G, G_units=None, units=None, return_log=True)
    assert eqtk.eqcheck(logx, x0, A=A, G=G, c_as_log=True)

    A = np.array(
        [
            [1.0, 0.0, 0.0, 0.0, 0.0, 1.0],
            [0.0, 1.0, 0.0, 0.0, 1.0, 1.0],
            [0.0, 0.0, 1.0, 0.0, 1.0, 1.0],
            [0.0, 0.0, 0.0, 1.0, 1.0, 1.0],
        ]
    )
    G = np.array([0.0, 40, 150, 200, -4200, -4215])
    x0 = np.array([[1e-6, 1e-6, 1e-6, 1.0000e-6, 0, 0]])
    logx = eqtk.solve(c0=x0, A=A, G=G, G_units=None, units=None, return_log=True)
    assert eqtk.eqcheck(logx, x0, A=A, G=G, c_as_log=True)


def test_large():
    # fmt: off
    A = np.array(
        [
            [1.0,1.0,0.0,0.0,0.0,2.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,2.0,2.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.0,3.0,3.0,3.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
            ],
            [1.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,2.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,2.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,3.0,2.0,2.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,2.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,2.0,1.0,1.0,3.0,2.0,2.0,2.0,1.0,2.0,1.0,1.0,0.0,0.0,2.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,2.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,4.0,3.0,3.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,
            ],
            [1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,2.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,2.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,2.0,1.0,1.0,0.0,3.0,2.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,2.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,2.0,0.0,1.0,0.0,2.0,1.0,1.0,2.0,1.0,2.0,3.0,2.0,1.0,2.0,1.0,0.0,0.0,1.0,0.0,1.0,2.0,1.0,0.0,1.0,0.0,0.0,1.0,0.0,2.0,1.0,1.0,0.0,2.0,1.0,3.0,2.0,2.0,1.0,0.0,2.0,1.0,1.0,0.0,4.0,3.0,2.0,2.0,1.0,0.0,
            ],
            [1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,2.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0,2.0,0.0,0.0,1.0,0.0,1.0,1.0,2.0,0.0,1.0,2.0,3.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0,2.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,2.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0,2.0,2.0,1.0,1.0,2.0,1.0,1.0,2.0,2.0,2.0,3.0,0.0,0.0,1.0,0.0,1.0,1.0,2.0,0.0,1.0,0.0,1.0,1.0,2.0,2.0,1.0,2.0,2.0,3.0,0.0,1.0,2.0,2.0,3.0,4.0,
            ],
        ]
    )
    # fmt: on
    G = np.array(
        [
            -4.2015367534032657e02,
            -1.2703232169812192e02,
            -5.4817682865924418e01,
            -7.8102170476565016e00,
            -5.0193490507510681e01,
            -2.7165182426095953e02,
            -2.2879300425908158e02,
            -1.4323976440450812e02,
            -1.8958975769447511e02,
            -1.4124781488205676e02,
            -8.6673976923205487e01,
            -2.0133236499415651e02,
            -3.2653642782462079e01,
            -6.7053699416077549e01,
            -1.1963351823998251e02,
            -4.1489422124390160e02,
            -3.7341204386611190e02,
            -2.8870092306527079e02,
            -3.3220415271165064e02,
            -2.9702434984420739e02,
            -2.6053825202585415e02,
            -3.8323486406656087e02,
            -2.3501213478769949e02,
            -1.6877304869504263e02,
            -2.0824653925915831e02,
            -3.3590996661662558e02,
            -2.0520012341497807e02,
            -2.5971699676849943e02,
            -2.1094947752425242e02,
            -1.7385165483988780e02,
            -2.8773765389188344e02,
            -1.0538997980893089e02,
            -2.3825117626792220e02,
            -2.2061630240883488e02,
            -2.6763222147566859e02,
            -4.4752134398923594e01,
            -9.1402458513709178e01,
            -1.3718133395724152e02,
            -1.8524123876379437e02,
            -5.5865029666144483e02,
            -5.1489457397372496e02,
            -4.3343826706414734e02,
            -4.7510981508132687e02,
            -4.5612936186968261e02,
            -4.0516544010432943e02,
            -5.2786658540528890e02,
            -3.7963121373685630e02,
            -3.1423591441078139e02,
            -3.5051515988808501e02,
            -4.8060673985504400e02,
            -3.4836654223951467e02,
            -4.0233100683437743e02,
            -4.7197688702079347e02,
            -3.9381231460595689e02,
            -5.1781246568902998e02,
            -3.8326654234796888e02,
            -3.2915592514831127e02,
            -4.4917341152776635e02,
            -3.2983630637315213e02,
            -2.7921350085332392e02,
            -4.4497398982119728e02,
            -3.9412684034275190e02,
            -4.4928628483319653e02,
            -3.0552056600426687e02,
            -3.4915651913700128e02,
            -3.1294557706150187e02,
            -2.6675738226782761e02,
            -3.8945399430852598e02,
            -2.6054781451352403e02,
            -1.8459981759035912e02,
            -2.3377960947381828e02,
            -3.7152431456702061e02,
            -2.2687638301116129e02,
            -2.7837400045836358e02,
            -3.9842931333298338e02,
            -4.2796378507687069e02,
            -3.6698879215177789e02,
            -4.3182337303644073e02,
            -3.5519390403130399e02,
            -2.3065815130972845e02,
            -2.7657722516245099e02,
            -4.0100240632810880e02,
            -2.7532513340609239e02,
            -3.2497380477812760e02,
            -2.9620693634022933e02,
            -2.4460174120284984e02,
            -3.5701620136122949e02,
            -1.9255737553808018e02,
            -3.2465646516596814e02,
            -3.0321729265725014e02,
            -4.1421271587576661e02,
            -2.0506920063988736e02,
            -3.1964834666572102e02,
            -1.2588463387721514e02,
            -2.5691105508367849e02,
            -2.5753511368260058e02,
            -3.0307716707347032e02,
            -4.3284119923642481e02,
            -2.4211326870787389e02,
            -2.9484362717015421e02,
            -2.8668170416631432e02,
            -3.3775513541674047e02,
            -6.9179245072223310e01,
            -1.0595181053210460e02,
            -1.6153764121002649e02,
            -1.5335633483058461e02,
            -2.0267567033456882e02,
            -2.5467945122971807e02,
        ]
    )
    x0 = np.array(
        [
            [
                1.8134373707286439e-08,
                3.5913242229740680e-14,
                3.5913242229740680e-14,
                3.5913242229740680e-14,
                3.5913242229740680e-14,
                1.7956621114870340e-14,
                3.5913242229740680e-14,
                3.5913242229740680e-14,
                3.5913242229740680e-14,
                1.7956621114870340e-14,
                3.5913242229740680e-14,
                3.5913242229740680e-14,
                1.7956621114870340e-14,
                3.5913242229740680e-14,
                1.7956621114870340e-14,
                1.1971080743246893e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                3.5913242229740680e-14,
                3.5913242229740680e-14,
                3.5913242229740680e-14,
                1.7956621114870340e-14,
                3.5913242229740680e-14,
                3.5913242229740680e-14,
                3.5913242229740680e-14,
                1.7956621114870340e-14,
                1.1971080743246893e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                3.5913242229740680e-14,
                3.5913242229740680e-14,
                1.7956621114870340e-14,
                1.1971080743246893e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.1971080743246893e-14,
                8.9783105574351699e-15,
                1.1971080743246893e-14,
                1.1971080743246893e-14,
                1.1971080743246893e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.1971080743246893e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                3.5913242229740680e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                3.5913242229740680e-14,
                1.7956621114870340e-14,
                1.1971080743246893e-14,
                1.7956621114870340e-14,
                3.5913242229740680e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                3.5913242229740680e-14,
                1.7956621114870340e-14,
                3.5913242229740680e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.1971080743246893e-14,
                8.9783105574351699e-15,
                1.1971080743246893e-14,
                1.1971080743246893e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.1971080743246893e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.1971080743246893e-14,
                8.9783105574351699e-15,
                1.1971080743246893e-14,
                1.7956621114870340e-14,
                1.7956621114870340e-14,
                1.1971080743246893e-14,
                8.9783105574351699e-15,
            ]
        ]
    )
    x = eqtk.solve(c0=x0, A=A, G=G)
    assert eqtk.eqcheck(x, x0, A=A, G=G)
